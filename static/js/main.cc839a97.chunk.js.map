{"version":3,"sources":["components/people/Person.jsx","components/people/InfinitePeople.jsx","components/species/Species.jsx","components/species/InfiniteSpecies.jsx","img/logo.png","App.jsx","reportWebVitals.js","index.js"],"names":["Person","name","hairColor","eyeColor","style","color","listStyle","fetchUrl","url","a","fetch","response","json","InfinitePeople","useInfiniteQuery","pageParam","getNextPageParam","lastPage","next","undefined","data","fetchNextPage","hasNextPage","isLoading","isFetching","isError","error","Spinner","animation","role","className","toString","variant","Card","text","width","Header","ListGroup","loadMore","hasMore","pages","map","pageData","results","person","Item","backgroundColor","hair_color","eye_color","Species","language","averageLifespan","InfiniteSpecies","species","average_lifespan","queryClient","QueryClient","App","client","Navbar","Container","Brand","marginRight","alt","src","logo","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc839a97.chunk.js","sourcesContent":["export function Person({ name, hairColor, eyeColor }) {\n  return (\n    <li style={{ color: \"#d9da8e\" }}>\n      {name}\n      <ul style={{ color: \"#f1f1f1\", listStyle: \"none\" }}>\n        <li>hair: {hairColor}</li>\n        <li>eyes: {eyeColor}</li>\n      </ul>\n    </li>\n  );\n}\n","import { Spinner, Card, ListGroup } from \"react-bootstrap\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Person } from \"./Person\";\n\nconst initialUrl = \"https://swapi.dev/api/people/\";\nconst fetchUrl = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfinitePeople() {\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isFetching,\n    isError,\n    error,\n  } = useInfiniteQuery(\n    \"sw-people\",\n    ({ pageParam = initialUrl }) => fetchUrl(pageParam),\n    { getNextPageParam: lastPage => lastPage.next || undefined }\n  );\n\n  if (isLoading)\n    return (\n      <div>\n        <Spinner animation='border' role='status' style={{ color: \"#85cdca\" }}>\n          <span className='visually-hidden'>Loading...</span>\n        </Spinner>\n      </div>\n    );\n  if (isError) return <div className='loading'>Error: {error.toString()}</div>;\n\n  return (\n    <div>\n      {isFetching && (\n        <div className='loading'>\n          <Spinner animation='border' variant='danger' />\n        </div>\n      )}\n      <Card text='light' style={{ width: \"18rem\" }} className='title'>\n        <Card.Header className='title text-center'>People</Card.Header>\n        <ListGroup variant='flush'>\n          <InfiniteScroll loadMore={fetchNextPage} hasMore={hasNextPage} />\n          {data.pages.map(pageData => {\n            return pageData.results.map(person => {\n              return (\n                <ListGroup.Item\n                  style={{ backgroundColor: \"black\", color: \"#f1f1f1\" }}\n                >\n                  {\" \"}\n                  <Person\n                    key={person.name}\n                    name={person.name}\n                    hairColor={person.hair_color}\n                    eyeColor={person.eye_color}\n                  />\n                </ListGroup.Item>\n              );\n            });\n          })}\n        </ListGroup>\n      </Card>\n      <InfiniteScroll />\n    </div>\n  );\n}\n","export function Species({ name, language, averageLifespan }) {\n  return (\n    <li style={{ color: \"#f8a310\" }}>\n      {name}\n      <ul style={{ color: \"#f1f1f1\", listStyle: \"none\" }}>\n        <li>language: {language}</li>\n        <li>average lifespan: {averageLifespan}</li>\n      </ul>\n    </li>\n  );\n}\n","import InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Species } from \"./Species\";\nimport { Card, ListGroup, Spinner } from \"react-bootstrap\";\n\nconst initialUrl = \"https://swapi.dev/api/species/\";\nconst fetchUrl = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfiniteSpecies() {\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isFetching,\n    isError,\n    error,\n  } = useInfiniteQuery(\n    \"sw-species\",\n    ({ pageParam = initialUrl }) => fetchUrl(pageParam),\n    {\n      getNextPageParam: lastPage => lastPage.next || undefined,\n    }\n  );\n  if (isLoading)\n    return (\n      <div>\n        <Spinner animation='border' role='status' style={{ color: \"#1d8dbe\" }}>\n          <span className='visually-hidden'>Loading...</span>\n        </Spinner>\n      </div>\n    );\n  if (isError) return <div>Error: {error.toString()}</div>;\n\n  return (\n    <div>\n      {isFetching && (\n        <div className='loading'>\n          <Spinner animation='border' variant='info' />\n        </div>\n      )}\n      <Card text='light' style={{ width: \"18rem\" }} className='title'>\n        <Card.Header className='title text-center'>Species</Card.Header>\n        <ListGroup variant='flush'>\n          <InfiniteScroll loadMore={fetchNextPage} hasMore={hasNextPage} />\n          {data.pages.map(pageData => {\n            return pageData.results.map(species => {\n              return (\n                <ListGroup.Item\n                  style={{ backgroundColor: \"black\", color: \"#f1f1f1\" }}\n                >\n                  <Species\n                    key={species.name}\n                    name={species.name}\n                    language={species.language}\n                    averageLifespan={species.average_lifespan}\n                  />\n                </ListGroup.Item>\n              );\n            });\n          })}\n        </ListGroup>\n      </Card>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.15acf4ca.png\";","import \"./App.css\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { InfinitePeople } from \"./components/people/InfinitePeople\";\nimport { InfiniteSpecies } from \"./components/species/InfiniteSpecies\";\nimport { Container, Navbar } from \"react-bootstrap\";\nimport logo from \"./img/logo.png\";\nconst queryClient = new QueryClient(); //default config\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className='App'>\n        <Navbar style={{ backgroundColor: \"black\" }} variant='dark'>\n          <Container>\n            <Navbar.Brand>\n              <img\n                style={{ marginRight: \"0.5rem\" }}\n                alt=''\n                src={logo}\n                width='90'\n                height='50'\n                className='d-inline-block align-center'\n              />\n              Infinite Scroll\n            </Navbar.Brand>\n          </Container>\n        </Navbar>\n        <div className='flex'>\n          <InfinitePeople />\n          <InfiniteSpecies />\n        </div>\n        <ReactQueryDevtools />\n      </div>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}